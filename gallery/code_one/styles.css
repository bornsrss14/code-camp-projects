:root {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  --color-nightForest:#111812;
  --color-burntMocha: #130e09;
  --color-midnightSea:#051118;
}

body {
  background: var(--color-midnightSea);
  font-family: sans-serif;
}
h1 {
  position: relative;
  font-size: 2rem;
  font-weight: 600;
  top: 100px;
  color: white;
  text-align: center;
}
main {
  margin: auto;
  position: relative;
  color: #f2f2f2;
  max-width: 60%;
  padding: 1.2rem 0;
  top: 100px;
}

.gallery img {
  position: relative;
  height: 100%;
  width: 100%;
  border-radius: 8px;
  box-shadow: 0 0 9px rgba(100, 100, 100, 0.7);
  display: block;
  min-height: 100%;
  max-width: 100%;
  object-fit: cover;
  transition: transform 0.4s;
}
/* img:hover {
  transform: scale(1.08);
  
} */
.gallery {
  position: relative;
  display: grid;
  gap: 1rem;
  grid-auto-flow: dense;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  padding-bottom: 2em;
}
.gallery > div:nth-of-type(odd) {
  grid-row-end: span 1;
}
.gallery > div:nth-of-type(even) {
  grid-row-end: span 2;
}

/* Este codigo es el que agrego para hacer el overlay con el hover efect  */
.container_overlay {
  position: relative;
}
.overlay {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  height: 100%;
  width: 100%;
  opacity: 0;
  transition: 0.5s ease;
  background-color: rgba(255, 255, 255, 0.623);
}
.overlay_img {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  transition: 0.5s ease;
  overflow: hidden;
}

.container_overlay:hover .overlay,
.container_overlay:hover img,
.container_overlay:hover .overlay_img {
  opacity: 1;
  border-radius: 8px;
  transform: scale(1.04);
}
.text_overlay {
  font-family: "Quicksand", sans-serif;
  font-size: 0.813rem;
  color: rgb(17, 8, 78);
  position: relative;
  padding: 1rem 1rem 0 1rem;
  top: 20%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 3;
  overflow: hidden;
}
.date_post {
  position: absolute;
  bottom: 0; /*ya recordé como funciona la opcion de absolute*/
  font-family: "Quicksand", sans-serif;
  text-transform: uppercase;
  font-size: 0.813rem;
  padding: 20px;
  color: rgb(17, 8, 78);
}

/* SUMARY 
  Entiendo que tenemos X cantidad de <img> en nuestro contenedor div > main
  y decidimos que tomen el diseño de GRID.
  2.- Para establecer el tamaño de el contenedor padre decimos que el max-width: será de 80%  de su contenedor principal, en este
  caso es la pantalla en general
  
  3.- Al elemento <div class"gallery" establecemos que queremos mostrarlo repeat(auto-fill, minmax(200px, 1fr))>
  esto es importante porque hago uso de la propiedad auto-fill, y establezco que cada columna tendrá un valor minimo y maximo */

/* 
  Practicar flexbox es una excelente manera de mejorar tus habilidades en diseño web responsivo y control de disposición de elementos. Aquí tienes algunos ejercicios que te pueden ayudar a familiarizarte con flexbox:
1. **Crea una barra de navegación horizontal**:
   - Utiliza flexbox para alinear los elementos de tu barra de navegación horizontalmente.
   - Juega con propiedades como `justify-content`, `align-items`, `flex-direction`, etc., para lograr diferentes disposiciones y alineaciones.
2. **Diseña una galería de imágenes flexible**:
   - Crea una cuadrícula de imágenes utilizando flexbox.
   - Experimenta con diferentes configuraciones de flexbox para lograr una cuadrícula que se adapte a diferentes tamaños de pantalla de manera elegante.
3. **Crea un diseño de blog simple**:
   - Utiliza flexbox para diseñar una estructura básica de blog con un encabezado, una barra lateral y una sección de contenido principal.
   - Practica la alineación de elementos y la distribución del espacio utilizando flexbox.
4. **Diseña un formulario con campos flexibles**:
   - Utiliza flexbox para diseñar un formulario con campos que se expandan y contraigan según el tamaño de la ventana del navegador.
   - Experimenta con la propiedad `flex-grow` para controlar cómo los elementos se expanden para llenar el espacio disponible.
5. **Crea un menú desplegable**:
   - Diseña un menú desplegable utilizando flexbox para el diseño y la alineación de los elementos.
   - Practica el uso de la propiedad `flex-wrap` para controlar el comportamiento del menú en diferentes tamaños de pantalla.
6. **Crea un diseño de tarjeta flexible**:
   - Diseña una tarjeta con contenido flexible que se ajuste dinámicamente al tamaño de la pantalla utilizando flexbox.
   - Experimenta con diferentes configuraciones de flexbox para lograr un diseño de tarjeta atractivo y adaptable. */
.cabecera {
  background-color: var(--color-nightForest);
  color: white;
  padding: 2em 0;
  text-align: center;
  width: 100vw;
  top: 0;
  left: 0;
  position: fixed;
  z-index: 100;
}
.gallery__dos {
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  gap: 2em;
}
.image__dos {
  position: relative;
}

.overlay__dos {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  padding: 25px;
  text-align: center;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.image__dos:hover .overlay__dos {
  opacity: 1;
}

/* Aquí comienzo los estilos del ejemplo */
.img-ex {
  border-radius: 8px;
  box-shadow: 0 0 9px rgba(100, 100, 100, 0.7);
  display: block;
  min-height: 100%;
  max-width: 100%;
  object-fit: cover;
  overflow: hidden;
  transition: transform 0.3s;
}
.img-ex:hover {
  transform: scale(1.06);
}
.text-ex{
  position:absolute;
}

.gallery-ex {
  margin-top: 3em;
  position:relative;
  display: grid;
  gap: 1.5rem;
  grid-auto-flow: dense;
  grid-template-columns: repeat(auto-fill, minmax(190px, 1fr));
}
.gallery-ex > div:nth-of-type(odd) {
  grid-row-end: span 1;
}
.gallery-ex > div:nth-of-type(even) {
  grid-row-end: span 2;
}
